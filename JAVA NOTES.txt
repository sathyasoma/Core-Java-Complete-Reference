JAVA
								 
								 
DAY 1: APRIL 1ST
======================================================
NATURAL LANGUAGES:(ENGLISH,TELUGU,TAMIL,URDU...)-COMMUNICATING IN BETWEEN HUMAN BEINGS

SIGN LANGUAGES--> deaf persons using those languages.

PROGRAMMING LANGUGAE --> COMMUNICATING WITH MACHINE TO PERFORM SOME ACTION

machine==>        binery langugae==>o's,  1's

USING PROGRAMMING LANGUAGES WHAT WE CAN DEVELOP?

   ->SOFTWARE/APPLICATION
   
   ATM APPLICATION
   CALCULATOR APPLICATION
   BILLING MACHINE/APPLICATION
   
   
WHAT TYPE OF APPLICATIONS WE HAVE IN THE IT INDUSTRY?

     1.STANDALONE/DESKTOP APPLICATIONS-ANTIVIRUS,CALCULATOR,ACROBATIC READER...
	 2.DISTRIBUTED/NETWORK BASED APPLICATIONS-FACEBOOK,GMAIL,AMAZON,FLIPKART...
	 
=>The application which we use in our machine those are standalone aplications	 
	 
DESKTOP APPLICATIONS RESULTS WON'T BE SHARABLE ACROSS THE GLOBE

DISTRIBUTED APPLICATIONS RESULTS SHARABLE ACROSS THE GLOBE.

	 
	*DIFFERENT TYPES OF  PROGRAMMING LANGUAGES WE HAVE*
=========================================================
	
	1.PROCEDURE ORIENTED (C,B,BCPL)==>[performance,security]
	2.OBJECT ORIENTED(JAVA,.NET,PYTHON,PHP..)==>[oops]
	3.SCRIPTING ORIENTED
	4.MODULA ORIENTED.(MODULA)
	
	

oops---oopl
oops features:
====================================================>>
omg->4 

1)inheritance
2)polymorphisam====>performance
3)abstraction
4)encapsultion====>security

java features:
=============
1)platform independent//.class===>.net--microsoft

2)garbage collection-->garbage collector==>unused memory space  
	

WHAT IS JAVA?
=========================

 ->OBJECT ORIENTED PROGRAMMING LANGUAGE FOR THE PURPOSE OF DEVELOPING
   BOTH STANDALONE AND DISTRIBUTED APPLICATIONS.
   
   
JAVA -> 1995 --> JAMES GOSLING(13 MEMBERS TEAM) --> SUNMICROSYSTEM  

RECENT YEARS -> ALL THE COPYRIGHTS OF SUNMICROSYSTEM OWNS BY ORACLE CORPORATION.

 
 IN TO THE MARKET WHILE THEY RELEASING, THEY HAVE RELEASED IN THREE EDITIONS
 
 
  1.JSE(JAVA STANDARD EDITION) --> CORE JAVA  -> STANDALONE APPLICATIONS
  2.JEE(JAVA ENTERPRISE EDITION) -->ADVANCED JAVA ->BOTH STANDALONE & DISTRIBUTED
  3.JME(JAVA MICRO/MOBILE EDITION) -->MOBILE APPLICATIONS/MICRO APPLICATIONS
  
  
SIGNIFACNCE/IMPORTANCE OF LEARNING CORE JAVA:
================================================
->TO DEVELOP STANDALONE APPLICATIONS
->TO LEARN ADVANCED JAVA
->TO LEARN HIGH END TECHNOLGOIES(HADOOP,SALESFORCE,TABLEU,PEGA,...)

FROM THE PAST 26 YEARS JAVA IS MAINTAING IT'S POPULARITY.
JAVA HAS IT'S OWN UNIQUE PRINCIPLES/CHARACTERSITICS.

JAVA PRINCIPLES/CHARACTERSITICS/BUZZWORDS/
=======================================
SIMPLE
PLATFORM INDEPENDENT
ARCHITECTURAL NEUTRAL
PORTABLE
MULTI THREADED
DYNAMIC
NETWORKED
DISTRIBUTED
OBJECT ORIENTED
ROBUST
..
..
..





In java if we write any program, what we require.

java - open source(with free of cost)

official website for java related sources --> www.oracle.com

Java SE 16 is the latest release for the Java SE Platform

java se 8 is the stable version




Prerequistes of writing java program:
======================================
c program -> c software -> turbo c

cpp program --> cpp software -> turbo cpp

java program --> java software --> jdk(java development kit)

1.download the jdk software from the www.oracle.com
2.install the jdk 
3.select the editor(notepad/notepad++,eclipse,netbeans,intellij)
4.write the java program
5.save the java program(<filename>.java)
6.compile the java program
7.execute/run the java program->output



DAY=2:
=================================================================

once you install java software(Jdk), to check whether it get's installed successully

or not, we have to open command prompt, and pass below command


cmd:/> java -version

java version "1.8.0_221"
Java(TM) SE Runtime Environment (build 1.8.0_221-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)


java is case-sensitive


structure of java program:
===========================
class <classname>
{
 public static void main(String[] args){}
 {
 //logic
 
 
 }
 
}
 
 ->java program should always starts from by defining class.
 ->class is a java reserved keyword(all the java reserved keywords must be in lower case)
 ->java program execution starts from main()
      public static void main(String[] args)
	  {
	  }
 
example:
``
class Demo
{
 public static void main(String[] args)
 {
   //logic
   System.out.println("welcome to java standard edition");
 }
}
 
 
 java programming langugae is unicode international language
 
 (it supports 18 international languages)
 

*compile the java program:
`````

jdk (java compiler)

->it will convert .java code(source code) to .class filename(byte code)

byte code contains machine level code

byte code is generated by java compiler

how can we compile the java program:
```````

syntax:

   javac <filename>.java

   javac Welcome.java
   

.class file is generated based on class name(Demo.class)


syntax for how to execute the program:
`````
   java <classname>
   
   java Demo
   
   
 java program gets executed by jvm(java virtual machine)

 when we execute the javaprogram,jvm internally calls main() and after
 logic gets executed.
 
 java compiler will convert our source code to byte code
 jvm will convert byte code to machine level code
 
 
D:\jse>javac Welcome.java
'javac' is not recognized as an internal or external command,
operable program or batch file.
  
what is path:
`
path is the location where all the java tools are available


------C:\Program Files\Java\jdk1.8.0_221\bin------


how to set the path:
======================
->right click on mycomputer
->click on properties
->Click on advanced system settings
->click on environment variables
->click on new button of system variables
-> give variable name as path and variable value as 
   C:\Program Files\Java\jdk1.8.0_221\bin
   
->click on ok(3 times)


DAY-3:
==================================================================
JAVA PRINCIPLES/CHARACTERSITICS/BUZZWORDS/
```````
SIMPLE
PLATFORM INDEPENDENT
ARCHITECTURAL NEUTRAL
PORTABLE
MULTI THREADED
DYNAMIC
NETWORKED
DISTRIBUTED
OBJECT ORIENTED
ROBUST
interpreted
secured
   
why java is simple:
````
-java syntax is based on c++
-java has removed many complicated concepts for ex pointers , operator
 overloading
-there is no need to remove unrefernced objects because
 there is an automatic garbage collection in java.
 
 
 object oriented:
 ````
 ->since it follows oops principles which were given by
   omg(object management group)-canadian organization
   
 ->everything in java is an object
 
 
oops principles:
`` 
   1.inheritance
   2.polymoprhism
   3.abstraction
   4.encapsulation
   
platform independent:
````
.c -> .exe

.java -> .class(byte code)-> windows operating system

 software(antivirus)-java programs(source code).java
 
 .class files (setup file)
 
 
 windows 
   
    quickheal
	
	
 mac
    
 
   
 
   we purchase the 

pendrive(.class file)

unix os

operating system to operating system that bytecode is also gets converted
in case of java.

java slogan -> wora(write once and run anywhere)


->java code can be run on multiple platforms, for ex , windows, linux,mac.

->java is compiled by the compiler and convereted into byte code.

->this bytecode is a platform - independent code because it can be run on 
  multiple platforms..
  
  
secured:
``
with java , we can develop virus-free systems.

 -> no explict pointer
 -> java programs run inside a virtual machine sandbox(jvm) 
 ->classloader:it's part of jre ->used to load classes into the jvm      dynamically.it adds security for the classes of the local file system 
 ->security manager: it determines what resources a class can access such as 
   reading and writing to the local disk.
   
 
robust:
`
->strong 


->it uses strong memeory management.

->lack of pointers that avoids secirity problems

->automatic garbage collection

->exception handling and type checking 
 

architectural neutral:
````
int-2 bytes(c program)-windows 32 bit
int- 4 bytes (c program)-windows 64 bit

size of the primitive types is fixed


portable:
```
portable ==> platform independent + architectural neutral


distributed:
`
jee->java enterprise edition

  RMI
  EJB
    ->distributed applications.
	
we can access any files from any machine on the internet.

multithreaded:
`````
cheking my bus services from origin place to destination place

a thred is like a separate programs.

executing concurrently(parallely)

DAY-4:
====================================================================================================
DATATYPES IN JAVA:
```
DATATYPE
```
it is representing the type of the data which we want to 
store.

we have to specifiy suitable datatype while we are storing 
the data into variables.

 basically in java, we have two types of datatypes
 
 
   1.primitive datatypes(built in datatypes)
   2.non-prmitive datatypes/reference datatypes
   
primitive datatypes:
`````

  pre-defined datatypes/built-in datatypes/system defined
  datatypes.
  
  these datatypes are given by sunmicrosystem.
  
  they were divided these "primitive datatypes" into 4 categories.
  
  
  *integer category (to store numeric values)
  
      -byte
	  -short
	     -int
	       -long
	  
  
 * float category(to store decimal values)
  
      -float
	  -double
  
       
 * character category(To stroe single characters information)
  
      -char
  
  
  *boolean category (to store logical values either true or false)
  
      -boolean
	  
total we have 8 prmitive datatypes categorized into 4 types.

	  
	  byte
	  short
	  int
	  long
	  float
	  double
	  char
	  boolean
	  
syntax:

  <datatypename> <variablename> = <data/value>;

  

invalid:
`` 
   name ='s';
   age=90
   mobileno=7676767678;
   
valid:
``
  char name= 's';
  int age = 90;
  char mobileno=7676776678;//invalid
  
 note: while we are storing the data into variables, it is higy recommended to
 give correct datatypes otherwise java compiler will give you compile time
 errors.
 
variable:
`
variable is the name/memory location where our data gets stored.

syntax:

   <datatype> <variablename> = <data>;

eg:

    int age = 90;

  int --> datatype
  age --> variablename
  90  --> actual data

rules to declare variable:
`````

     
 
1. we are not allowed to declare variables names as any java reserved keyword.

       int int =90; //invalid
	   
2. variable names should not start with any numeric digit

       int 2age = 90; //invalid

3.variable names should always starts with alphabets.

       int age=90;//valid
       int age2=90;//valid(it allows alphanumeric)

4.variable names are not allowed any special characters except(_ and $)

       int age*=90;//invalid
	   int age_shree=90;//valid
	   int age$shree=90;//valid
	   
	   
5.variable name length should not exceed 64 characters.

	   int aasldfalkjsldflkasfjklasfl=90;
   
   90(numeric value)
   
     byte,short,int,long
	 
   byte/short/int/long age=90;


choosing the datatype is based on the range of the value which we are storing.

  byte b = 90;(1 byte of memory)
  
  short b=129;//invalid 

every datatype is maintaining it's memory size and range.

byte --> 1 byte --> 8 bits


formula to calculate range of any datatype:


   -2 ^n-1 to (2 ^ n-1) -1

  ==> n(No.of bits which is occuping by the datatype)
  
  -2 ^ 7 to 2 ^7 -1
  
  -128 to 127
  
  
  

datatype    memorysizes   range
 byte         1 byte    -128 to 127
 short        2 bytes   .....
 int          4 bytes
 long         8 bytes
 float        4 bytes
 double       8 bytes
 boolean      1 bit
 char         2 bytes
 
 
example:
````
class DataTypeDemo
{
   public static void main(String[] args)
   {
	   
     //variables declaration
      short age=130;
	  char status='a';
	  boolean isActive=true;
	  double marks$ = 90.5;
	  double marks_=90.5;
	  
	 //displaying variables  
	  System.out.println(age);
	  System.out.println(status);
	  System.out.println(isActive);
	  System.out.println(marks$);
 
   }

}



DAY-5:
=========================================================================
Method(s):
`
  c language --> function
  
  java language --> method
  
 
->method is the location where we are writing the logic to perform some operations based on the requirement.

syntax:
``

   [accessmodifier] <returntype>  <methodname>([parameters if any])//head
   {
     //logic//body 
   }
   
 eg:
 
   public static void main(String[] args)//method heading
   {
      //logic//method body
   }

eg:
define one method with name as disply which displays "HelloJava"

             void display()
			 {
			    System.out.println("HelloJava");
			 }

eg:

define one method which retuns person's age?

             int getAge()
			 {
			    return 90;
			 }

note:
``
return value and return type must be compatible(same)


eg:

define one method which returns name of the employee?

         String getEmployeeName()
		 {
		    return "Shree";
		 }

eg:

define one method which retuns salary of the employee?

          double getEmployeeSalary()
		  {
		     return 6789.00;
		  }

eg:

define one method which retuns grade of the student?


    char getStudentGrade()
	{
	  return 'A';
	}
	
eg:

define one method which retuns whether student is active or not?

 true
 false
 

boolean isStudentActive()
{
   return true;
}


eg:

define one method which takes two integer values and 
returns their sum?

   int getSum(int x, int y)
   {
      return x+y;
   }

eg:

define one method which takes their firstname and lastname
and gives their full name?



note:
`
while we are defining methods, we are not allowed to gives
spaces in between.

eg:

String getFullName(String firstname,String lastname)
{
  return firstname+lastname;
}


eg:

define one method which takes student name and student id
and displays their information?


void getStudentDetails(String studentname,int studentid)
{
 System.out.println(studentname);
 System.out.println(studentid);
}


eg:
`
define one method which takes employee salary and displays
their annual salary?


void getEmployeeAnnualSalary(double employeesalary)
{
 System.out.println(employeesalary*12);
}





DAY-6:
================================================================================>

 ->Variables are for storing the data
 ->Methods are for writing the logic.
 
 
 
java is object oriented programming language

  -since it follows oops principles given by OMG
   (object management group)
   
oops principles:
``
  -inheritiance
  -polymorphism
  -abstraction
  -encapsulation
  
In java, to achieve these 4 oops principles, we are using 
two concepts. those are

 -class
 -object

 
note:
``
java program should starts always by defining with class.
without class definition , there is no java program.

  
class:

class is a collection of variables and methods 
into a single unit.
this single unit is known as class.

syntax:
``
     class <classname>
	 {
	    //variables
		//methods definiton
	 }
	 
note:
``
from above syntax, "class" is the java reserved keyword	for the purpose 
of defining the class.

examples:
`
define one class employee which stores his emloyee id, employee name & employee salary  and 
calculates his annual salary?


  class Employee
  {
     //variables intialization(declaration + assign the values)
     int empid=100;
	 String empname="Ram";
	 double empsal=8790.00;
	 
	 //method for calculating employee annual salary
	 
	 public void getAnnualSalary()
	 {
	    System.out.println(empsal*12);
	 }
  }

 
2)define one class Student which stores studentid,studentname,studentmarks
  and display all student details?
  
  
class Student
{
//variable student information
{

int studid=100;
String studname="Aarush";
double studmarks=100;

//Method for displaying student info

public void getStudentDetails()
{
System.out.println(studid + " " + studname + " " +studmarks);
               
}

}


note:
``
if we want to execute any java program, main() method is 
required mandatorily.

3)Define one class which stores customerid,customername
  and his no.of orders and display his order details like
  order id, product name etc...
  
eg:
``` 
  class Customer{
    int custid= 234;
    String custname="harish";
	int nooforders=6;
    int orderid= 256;
    String productname="onions";
    void getOrderDetails(){
       System.out.println(oderid + " "+productname + " " + nooforders);
    }

}
   

--------------

class Customer

{

//variable customer order information

int customerid=01;
String customername="Sai";
int customerorders=05;
String productname="lenovo";
int orderid=100;

//Method for displaying customer order info

public void getCustomerDetails()

{

System.out.println(customerid);

System.out.println(productname + " " +customerorders + " " + orderid);

}

}

--------

define one class which performs all arithmetic operations?


    class ArithmeticOperations
	{
	
	  public void sum(int x, int y)
	  {
	    System.out.println("sum is " + (x+y));
	  }
	  
	  public void sub(int x, int y)
	  {
	    System.out.println("sub is " + (x-y));
	  }

      public void mul(int x, int y)
	  {
	    System.out.println("Mulitplication is " + (x*y));
	  }
	  
	  public void div(int x, int y)
	  {
	   System.out.println("division is " + (x/y)");
	  }
}



DAY-7:
=============================================================================================>

jdk-java development kit(java software name)

     -development environment(develop java program)
	 -execution environment(execute the java applications)
	 
	 
    
jre-java runtime environment


     -provides runtime environment (execute the java applications)
	 
	 

jvm-java virtual machine

    -execute the java programs/applications
	
	

  jdk = jre+jvm
  


object:
`
defintion: instance of a class.

instance: allocating sufficient amount of memory space for all properties
inside the class.



class is the collection of variables and methods into a single unit.

that single unit is known as class.


   class Student
   {
     //variables-to store the data
	  int stid=100;
	  String stname="ram";
	  
	 //methods-to write the logic.
   }
   

whenver we define the class, memory spaces will not be created for the properties
which we are declaring inside the class.

note:
`
when we create the object for any class, memory will be created for the class properties.


1000 students 

 1000 objects are required or only one object is required?
 
for a single class how many objects we can create?

we can create multiple objects based on the requirement.


syntax:
``
<classname> <objectname> = new <classname>();

eg:
`
Student shree = new Student();
Student sathya = new Student();
Student Ram = new Student();


note:
`
object names always must be unique.

Student --> name of the class
shree,sathya,Ram --> name of the objects
=   --> assignment operator
new  --> dynamic memory allocation operator
Student()--> constructor


q) who will execute the java program?

  jvm(java interpretor)
  
 internally jvm will call main () 

example:
``
class Student
{
//variable student information


int studid=100;
String studname="Aarush";
double studmarks=100;

//Method for displaying student info

public void getStudentDetails()
{
System.out.println(studid + " " + studname + " " +studmarks);

}

public static void main(String[] args)
{
	
	//object creation
    
    Student obj1 = new Student();

	System.out.println(obj1.studid);
	System.out.println(obj1.studname);
	System.out.println(obj1.studmarks);
	
	System.out.println("==================");
	
	//call my own method using object
	obj1.getStudentDetails();
	  
}

}

2)Define an Employee class which is holding 
  employeeid,name,salary and calcuclates his annual salary?
  and create the object and access all the properties of 
  an Emploee class using object?
  
  
   class Employee
   {
     
	  int empid=100;
	  String empname="Shree";
	  double empsal = 6878.00;
	  
	  public void getEmpAnnualSalary()
	  {
	     System.out.println("Annual Salary : " + empsal*12);
	  }
   
      //define main()
	 
	  public static void main(String[] args)
	  {
	     Emploee obj1 = new Employee();
		 
	     //calling getEmpAnnualSalary() using object
		 
		 obj1.getEmpAnnualSalary();
		 
	  }
	  
	  
   }
  

3)define Customer class which holds his firstname and last name
  and gives his full name try to access the properties using
  object?
  
  
class Customer
{
String customer_firstname ="Sai";
String customer_lastname="Ram";
//Method for displaying customer full name
public void getCustomerFullName()
{
System.out.println("Customer Full Name: " + customer_firstname+customer_lastname);
}
//define main()

public static void main(String[] arg)
{
 Customer obj1 = new Customer(); 
 obj1.getCustomerFullName();
 
}
  
}



DAY-8:
=============================================================
constructor:
`
   Student obj = new Student();
   
   Student --> name of the class
   obj --> name of the object
   =   -> assignment operator
   
   new --> dynamic memory allocation operator
   
   Student() --> constructor
   
rule:
``
constructor name must be similar to class name.
constructor should not return anything even void also.




   
if anything followed by () , we can call it as method.

constructor is a special member method

purpose:
```
to initialize the object.

->it is highly recommended to keep initalization logic inside constructor 
  not in normal method because to avoid explicit calling.
  
  
  


   int a;//variable declaration
   
   a=100;//assignment operations
   
   
   int a=100;//variable initialization(declaration + assigning)
   
   
   
ide's -> integrated development environment.

  eclipse,netbeans,intellij,myeclipse..


how to work with eclipse ide:
`````
1.download the eclipse from https://www.eclipse.org/downloads/packages/release/helios/sr1/eclipse-ide-java-developers

2.  once you get the zip file, extract the zip file and open the installation 
   folder of eclipse
   
3. there you find one eclipse application file

4. double click on that

5. select the workspace where you would like to save your program

6. click on launch

7. you will get welcome page of eclipse, just close it 

8.click on file --> new --> project --> java project

9.click on next

10.give the project name: ... and click on next

11.click on finish

12.right click on src folder, click on new --> click on class

13. give the class name: .... , click on finish


note:
``
whatever the code we are writing inside any ide, it is autocompiled
we no need to compile the code explicitly.

how can we execute the java code in ide:
`````
->right click on the program --> run as --> java application
->you can see the output in the console.


based on the datatype category, we do have default values.

 for integer category --> 0
 for float category --> 0.0
 for char category -->  single space
 for boolean category --> false
 for all class types --> null
 
 
example without constructor 
```

public class Student{
	
	//variable declaration
	int stid;
	String stname;
	
	//assign the values
	public void assign()
	{
		stid=100;
		stname="Ram";
	}
	
	//for displaying the values
	public void display()
	{
		System.out.println("student id " + stid);
		System.out.println("student name is " + stname);
	}
	
	//main method
	public static void main(String[] args) {
		
		//object creation
		
		Student obj = new Student();
		
		//calling assign()
		
		obj.assign();
		//calling display()
		obj.display();
	}

}


with constructor:
`` 

public class Student{
	
	//variable declaration
	int stid;
	String stname;
	
	
	public Student()
	{
		//intialization logic
		stid=100;
		stname="ram";
	}
	//for displaying the values
	public void display()
	{
		System.out.println("student id " + stid);
		System.out.println("student name is " + stname);
	}
	
	//main method
	public static void main(String[] args) {
		
		//object creation
		
		Student obj = new Student();
		
		//calling display()
		obj.display();
	}

}


DAY-9:
======================================================================

->to initialize the object.

to write the intialization logic.


 rules:

 1.constructor name must be similar to class name
 2.constructor should not return anything even void also.


types of constructors:
`````
->no-arg constructor/default constructor
->parameterized constructor

 
  no-arg constructor:

          1.user defined default constructor-our own values
          2.system defined default constructor-default values		  

	 
 when we did not define any default constructor, system defined default constructor can be generated by the java compiler and it is getting initialized with default values.

 when we define our own default constructor, obviously we are initialzing 
 with our own values.

parameterized constructor:
`````
it is the constructor which takes parameters.


example:
``

public class Student{
	
	//variable declaration
	int stid;
	String stname;
	
	//parameterized constructor
	public Student(int x,String y)
	{
		stid=x;
		stname=y;
	}
	
	
	//for displaying the values
	public void display()
	{
		System.out.println("student id " + stid);
		System.out.println("student name is " + stname);
	}
	
	//main method
	public static void main(String[] args) {
		
		//object creation
		
		Student obj = new Student(100,"shree");
		
		//calling display()
		obj.display();
	}

}


q. can we define both default and parameterized constructors?

  yes we can define
  
example:
``

public class Student{
	
	//default constructor
	public Student()
	{
		System.out.println("iam default constructor");
	}
	
	//parameterized constructor
	public Student(int x)
	{
		System.out.println("iam parameterized constructor");
	}
	
	
	
	//main method
	public static void main(String[] args) {
		
		
		Student st = new Student();
		
		Student st1 = new Student(100);
	}

}


what is the difference between default constructor and parameterized constructor?

in case of parameterized constructor, while we are creating the object
we can initalize the values but it is not happening in the case of 
default constructor.


note:
`````
default constructor is available in only one form, where as parameterized
constructor can be available in many forms.


note:
system defined default constructor will be generated by the 
java compiler when we are not defining any constructors in our
program/class.


if we define any parameterized constructors in our class, 
java compiler won't generated system defined default constructor.


day-10:
=====================================================================
==============================================================
instance(non-static) vs static


object: instance of a class.


instance: allocating sufficient amount of memory space for all the class 
properties.


int a;//non-static variable
static int a;//static variable

note: java is case-sensitive programming language


"static" is a java reserved keyword, for the purpose of declaring static variables and defining static methods.

//non-static method
public void m1()
{
}
 
//static method
public static void m1()
{
} 
  
  
 in java, we have two areas are there basically
 
 
  1.instance area
  2.static areas
  
  
 instance area is one, which belongs to any instance or non-static method

 ex:
 
   //non-static method
	public void m1()
	{
	//instance area
	}
  
 static area is one, which belongs to any static method.
 
 ex:
   //static method
	public static void m1()
	{
	  //static area
	}

 ex:
 
    public static void main(String[] args)
	{
	// static area
	}


instance properties(varaibles, methods,constructors , blocks)

static properties(variable,methods,blocks)


note:
``
whenever we define the class, memory spaces will not be created for class properties.

note:
``
whenever we create the object for a class, memory spaces will be created for 
non-static or instance properties of the class by the jvm so that data gets stored.

note:
``
for static properties memory will be created at the time of loading the class into main memory.

jvm --> classloadersubsystem


note:
``
we can access non-static or instance properties from static area
w.r.to object only.

we can access non-static properties from instance area directly.

example:
``

public class Test1 {
	
	//instance properties or non static
	
	int a;
	String b;
	
	
	
	public Test1()
	{
		//assign the values to my non-static variables
		a=100;
		b="ram";
	}
	
	
	//instance method
	public void display()
	{
		//instance area
		System.out.println(a);
		System.out.println(b);
		
	}
	
	public static void main(String[] args) {
		
		//static area
		
		//object creation
		
		Test1 obj = new Test1();
		
		System.out.println(obj.a);
		System.out.println(obj.b);
		
		
		//call the instance method from static area
		
		System.out.println("===============");
		
		obj.display();
	
	}

}


note:
```
if the properties are of static type, we can access w.r.to
class name either from non-static area or static area 


note:
``
it is highly recommended to access the static properties w.r.to
class name from any area either static or non-staic.



public class Test1 {
	
	//static properties
	
	static int a=100;
	static String b="ram";

	//instance method
	public void display()
	{
		//instance area
		System.out.println(Test1.a);
		System.out.println(Test1.b);
		
	}
	
	public static void main(String[] args) {
		
		//static area
		
		System.out.println(Test1.a);
		System.out.println(Test1.b);
		
		
		
		
	}
	
	
	

}






why static?
`````
for static properties memory will be created only one time 

for nonstatic properties memory will be created evertime whenever we
create the object.

1000
  class college
  {
    int stid;
	String stname;
	static String collegename="xyz";
  }




DAY-11:
=======================================================================
======================================================================	
 control statements in java:
 ``````
 we can control the flow of execution.
 
 
 using these control statements, which part of the code
 will be executed, when it will be executed , how many no.of 
 times we can make it execute
 
 
 java provides three types of control statements
 
   1.decision making statements
   2.loop statements
   3.jump statements
   
   
 1.decision making statements:
 ``````
 
 decision making statements evaluate the boolean expression
 and contrl the program flow depending upon the condition
 result.
 
   there are two types of decision making staements in java.
   
             1.if statement
			 2.switch statement
			 
if statement
`--------------
in java , if statement is used to evaluate a condition.

the control of the program is diverted depending upon the
condition result that is a boolean value, either true or false.


in java, there are four types of if-staements 

  
          1.if statement
		  2.if else statement
		  3.else-if statement
		  4.nested if statement
		  
		  
1.if statement:
````
it evaluates a boolean expression and enables the program 
to enter a block of code if the expresson evaluates to true.

syntax:
`
   if(<condition>)
   {
     //block of code 
   }
   
example:
```

public class Test2 {
	
	public static void main(String[] args) {
		
		
	  int x=100;
	  int y=200;
	  
	  if(x+y>200)
	  {
		  System.out.println("x+y is greater than 200");
	  }
	}

}


if-else statement:
````
if-else satement is an extension to the if-statement
which uses another block of code. i.e else block.


The else block is executed if the condition of the if-block
is evaluated as false.


syntax:
``
syntax:
`
   if(<condition>)
   {
     //block of code 
   }
   else(<condition>)
   {
     //block of code
   }
   

example:
```

public class Test2 {
	
	public static void main(String[] args) {
		
		
	  int x=100;
	  int y=200;
	  
	  if(x+y<200)
	  {
		  System.out.println("x+y is less than 200");
	  }
	  
	  else
	  {
		  
		  System.out.println("x+y is greater than 200");
	  }
	  
	}

}


3.else-if statement:
`````
1 -if statemnt
multiple -else-if statements
1-else statement

example:
`

public class Test3 {
	
	public static void main(String[] args) {
		
		
		
		String city="Delhi";
		
		if(city=="Meerut")
		{
			System.out.println("city is meerut");
		}
		
		else if(city=="Noida")
		{
			System.out.println("city is noida");
		}
		
		else if(city=="Agra")
		{
			System.out.println("city is agra");
		}
		
		else
		{
			System.out.println(city);
		}
			
		
		
	}

}


assignment:
``--------
check whether number is positive,negative or zero by
using if-else-if?


-----------------------------
public class test1 {

 public static void main(String[] args) {
     
  int a=100;
 if(a>0)
  
 {
  
  System.out.println("number is postive");
 }
 
 else if(a<0)
 {
    
   System.out.println("number is -ve");
  }  
  
  else{
  
  System.out.println("number is zero");
  }
 }}


nested-if statement:
````
it is always legal to nest if-else staements which means
we can use one of or else if statements inside another if
or else if statements.

syntax:
   if(booleanexpression1)
   {
     //executes when the boolean expression1 is true
	 if(booleanexpression2)
	 {
	  //executes when the boolean expression2 is true
	  }
   }
   
example:
```

public class Test4 {
	
	public static void main(String[] args) {
		
		
		int x=30;
		int y=10;
		
		if(x==30)
		{
			
			if(y==10)
			{
				System.out.println("x=30 and y=10");
			}
		}
	}

}

switch :
======================
public class SwitchCaseExample2 {
 // without break statment where the condition match from there remaing all will executed with deflaut
	public static void main(String args[]){
	      int i=2;
	      switch(i)
	      {
		 case 1:
		   System.out.println("Case1 ");
		 case 2:
		   System.out.println("Case2 ");
		 case 3:
		   System.out.println("Case3 ");
		 case 4:
	           System.out.println("Case4 ");
		 default:
		   System.out.println("Default ");
	      }
	   }

}




ex 2:
----
package com.flowcontrols;

//with break statemnt
public class SwitchCaseExample3 {
	

	   public static void main(String args[]){
	      int i=3;
	      switch(i)
	      {
		 case 1:
		   System.out.println("Case1 ");
		   break;
		 case 2:
		   System.out.println("Case2 ");
		   break;
		 case 3:
		   System.out.println("Case3 ");
		
		 case 4:
	           System.out.println("Case4 ");
	           break;
		 default:
		   System.out.println("Default ");
	      }
	   }

}



 Loops in java(loop statements):
 ````
 In programming languages, loops are used to execute
 a set of instructions repeatedly when some conditions
 become true.
 
 
 there are 3 types of loops in java.
 
   1.for loop
   2.while loop
   3.do-while loop


for loop:
```
it is used to iterate a part of the program several times.

if the number of iteration is fixed, it is recommended
to use for loop.

syntax:
``
for(intialization;conditionchecking;incremnt/decrement)
{
 //code to be executed
}

eg:




public class Test7 {
	
	public static void main(String[] args) {
		
		//for loop
		for(int i=1;i<=10;i++)
		{
		System.out.println(i);
		}
		
	}

}


write a program to display 100 to 200 numbers using
for loop?



public class Test7 {
	
	public static void main(String[] args) {
		
		//for loop

		for(int i=100; i<=200;i++)
		{

		     System.out.println(i);

		}
		
		
		
	}

}


write a java program for displaying first 10 numbers
in reverse order using for loop?

ex:


public class Test7 {
	
	public static void main(String[] args) {
		
		//for loop

		  for(int i=10; i>=1;i--)
		  {

		  System.out.println(i);

		  }
		
		
		
	}

}





write a java program for displaying  even numbers
using for loop?

expected output:
````
2
4
6
8
10

program:
```

public class Test7 {
	
	public static void main(String[] args) {
		
		//for loop

		for(int i=2; i<=10;i=i+2)
		{

		System.out.println(i);

		}

		
		
		
	}

}

assignment:
``````
write a java program for displaying  odd numbers
using for loop?


public class Test7 {
	
	public static void main(String[] args) {
		
		//for loop

		for(int i=1; i<=10;i=i+2)
		{

		System.out.println(i);

		}
	
		
	}

}

while loop:
``
it is used to iterate a part of the program several times.

if the number of iteration is not fixed, it is recommended
to use while loop.


syntax:
``
              while(condition)
			  {
			  //code to be executed.
			  }
 
write a java program for displaying 1 to 10 numbers using
while loop?

example:
``````

public class Test8 {
	
	
	public static void main(String[] args) {
		
		
		int i=1;
		while(i<=10)
		{

		System.out.println(i);
		i++;

		}
		
		
	}

}


write a java program for displaying 1000 to 500 in reverse order?


public class Test8 {
	
	
	public static void main(String[] args) {
		
		
		int i=1000;


		while(i>=500)
		{

		System.out.println(i);
		i--;

		
		}
		
		
	}

}


->write a java program for displaying even numbers
  using while loop?
  
  2
  4
  6
  8
  10
  
 example:
``

public class Test8 {

	public static void main(String[] args) {

		int i=0;

		while(i<=10)

		{
			
		System.out.println(i);
		i=i+2;

		}
	}

}

->write a java program to define infinite while loop?



//defninig infinite while loop
public class Test8 {

	public static void main(String[] args) {

		while(true)
		{
			System.out.println("infinite while loop");
		}
	}

}


example:
```

//defninig infinite while loop
public class Test8 {

	public static void main(String[] args) {

		 int i=100;
		while(i>1)
		{
			System.out.println("infinite while loop");
			i++;
		}
	}

}


assignment:
``
write a java program for achieving infinite loop using
for loop?

do-while loop:
````
it is used to iterate a part of the program several times.


if the number of iteration is not fixed and you must
have to execute the loop at least once, it is recommended
to use do-while loop.

icici --> at last it asks for pin number(do-while)

sbi --> initially it asks for pin number(while)

java do-while loop is execute at least once because 
condition is checked after loop body.


syntax:
``
             do{
			 
			    //code to be executed
			 }
			 while(condition);


write a java program for displaying 1 to 10 numbers
using do-while loop?


//defninig infinite while loop
public class Test8 {

	public static void main(String[] args) {

		// do-while loop
		int i = 1;
		do {
			System.out.println(i);
			i++;

		} while (i<=10);
	}

}


->
write a java program for displaying 20 to 10 numbers
in reverse order using do-while loop?



//defninig infinite while loop
public class Test8 {

	public static void main(String[] args) {

		int i=20;

		do{
		 System.out.println(i);
		  i--;
		 }
		 while (i>=10);
	}

}


->write a java program for infinite loop using do-while?            


//defninig infinite while loop
public class Test8 {

	public static void main(String[] args) {

		
		do
		{
		 System.out.println("Infinite do while loop");
		 }
		 while (true);
		}
	}


jump statements:
````
when a break statement is encounted inside a loop, the loop is 
immediatly terminated and the program control resumes at the next 
statement following the loop.

  the java break statement is used to break loop or switch staement.
  
  it breaks the current flow of the program at specified condition 
  
  for loop
  while loop
  do-while loop


break statement in for loop:
````

//defninig infinite while loop
public class Test8 {

	public static void main(String[] args) {

		
		for(int i=1;i<=10;i++)
		{
			if(i==5)
			{
				
				break;
			}
			System.out.println(i);
			
		}
	}
}




assignment:
``
use break statement in both while loop and as well
as do-while loop?



continue statement:
``
continue statement is used in loop control structure
when you need to jump to the next iteration of the loop
immediatly.

it can be used with for loop or while loop or do-while.

it is used to continue the loop, it continues the current
flow of the program and skips the remaining code at
the specified condition.


syntax:

   jump-statement;
   continue;
   
   
example:
```

//defninig infinite while loop
public class Test8 {

	public static void main(String[] args) {

		
		for(int i=1;i<=10;i++)
		{
			if(i==5)
			{
				
				continue;
			}
			System.out.println(i);
			
		}
	}
}


assignment:
``
write a java program for apply the continue statement
in both while and do-while loop(s)?

command line arguments:
````

class Test1
{

//userdefined instance methods
 public void m1()
 {
 //logic
 }
 
 public void m2()
 {
 //logic
 }
 
 //predefined static method
 
 publi static void main(String[] args)
 {
 

 }
}
   

why main() method is mandatory in every java program?

 ->java execution starts from main()
 
 ->jvm internally calling main()
 
 
simple program for addition of two numbers:
````````

public class Test9 {

	//user defined  instance method
	public void add(int x, int y) {
		System.out.println("the sum is " + (x + y));
	}

	public static void main(String[] args) {

		//static area
		System.out.println("i am main method");
		
		Test9 obj = new Test9();
	    //call the add()
		obj.add(20, 30);
		
	}
}

int x = 100;

int x = 100,200;

requirement:
 i want to store  1 crore values?
 
 
only one variable

 storing multiple values inside a single variable.
 
   ->by using Arrays concepts
   
   
   int x[];
   x=new int{1,2,3,4};
   

in arrays, values are stored and accessed based on
index number.

index value starts from 0


if size 3 , maximum index is 2

if size is n , maximum index is (n-1)

example:
`

public class Test9 {


	public static void main(String[] args) {

		int x[];//array variable declare
		x = new int[3];//instantiation
		
		//assigning the values 
		x[0]=100;
		x[1]=200;
		x[2]=300;
	
		//printing 
		
		System.out.println(x[0]);
		System.out.println(x[1]);
		System.out.println(x[2]);
		
		//using for loop
		System.out.println("using for loop displaying array elements");
		for(int i=0;i<3;i++)
		{
			System.out.println(x[i]);
		}
		
	}
}


assignment:
```
declare one string variable and assign 3 city names
like hyderabad,pune,chennai and then display those
values using for loop?


program:
``
public class Test9 {


	public static void main(String[] args) {

		String cityNames[]; //array variable declare

		cityNames=new String[3]; //instantiation

		//assigning the values

		cityNames[0]="hyd";
		cityNames[1]="pune";
		cityNames[2]="chennai";

	

		//using for loop
    
		for(int i=0;i<3;i++)

		{

		System.out.println(cityNames[i]);

		}
}
}

example:
```

public class Test9 {


	public static void main(String[] args) {

		/*
		 * String cityNames[]; //array variable declare
		 * 
		 * cityNames=new String[3]; //instantiation
		 * 
		 * //assigning the values
		 * 
		 * cityNames[0]="hyd"; cityNames[1]="pune"; cityNames[2]="chennai";
		 */

		 String cityNames[] = {"hyd","pune","chennai"};
		 
		 int x[] = {100,200,300};
		 
		 float marks[]= {38.5f,45.6f,24.5f};
	

		//using for loop
    
		for(int i=0;i<3;i++)

		{

		System.out.println(cityNames[i]);
		System.out.println(x[i]);
		System.out.println(marks[i]);

		}
}
}



array variable intialization:
`````
datatype variablename[] = {value1,value2,value3};

command line arguments:
```
the arguments which we are passing to main() , those
arguments we call it as command line arguments.


command line arguemnts are by default String type.


while we are executing the program, whatever the values we
are passing , those values will be submitted to main()
of String type.



example:
``````

public class Test9 {

	public static void main(String[] args) {

		for(int i=0;i<3;i++)
		{
			System.out.println(args[i]);
		}
	}
}

```
example:
```

public class Test9 {

	public static void main(String[] args) {

		int x = Integer.parseInt(args[0]);
		int y = Integer.parseInt(args[1]);
		int z = x+y;
		System.out.println("sum of two numbers is " + z);
	}
}



from above example, Integer is the pre-defined class available in java.lang
package 

in this class we do have parseInt(String) which accepts string as an 
argument and returns integer.

Since parseInt() is a static while we are calling we have to call w.r.to
class name i.e Integer.


         ->int returnvalue = Integer.parseInt(323);
		 



byte   ->Byte  -> parseByte(String)(String --> byte)
short  ->Short -> parseShort(String)(String -->short)
int    ->Integer
long   ->Long
float  ->Float
double -> Double
char   ->Character
boolean ->Boolean



these classes are known wrapper classes.

->wrapper classes are the classes for the purpose of converting 
String type to corresponding datatypes and viceversa.




->write a java program for calculating annaual income of the employee salary?

        ->salary of the employee --> 2000
		  no.of months in the year --> 12
          annual income of the salary --> 24000
		  
		  
		  
program:
```

public class Test9 {

	public static void main(String[] args) {

		float salary = Float.parseFloat(args[0]);
		
		float noOfMonths = Float.parseFloat(args[1]);
		
		float annualSalary = salary * noOfMonths;
		
		System.out.println("annual salary of an employee is " + annualSalary);
		
	}
}


->write a java program which takes two values and displays their product?

public class Test9 {

	public static void main(String[] args) {

		double firstNumber = Double.parseDouble(args[0]);
		double secondNumber = Double.parseDouble(args[0]);
		double product = firstNumber * secondNumber;
		System.out.println("product of given two numbers is " + product);

	}
}



write a java program which gives square of the given number?

sample input and output:
```
2 --> 4
10 -->100


public class Test9 {

	public static void main(String[] args) {

		
		  double firstNumber = Double.parseDouble(args[0]);
		  double square = firstNumber*firstNumber;
		 
		  System.out.println("square of given number is " + square);


	}
}


assignment:
```
do the same program by writing one line logic?


note:
``
wrapper classes are existed in java for every datatype.


day-18:
```
operators in java:
```
operator in java is a symbol which is used
to perform operations.

+,-,*,/ etc...

we have many types of operators in java.

  -Unary Operator
  -Arithmetic Operator
  -Shift Operator
  -Relational Operator
  -Bitwise operator
  -Logical Operator
  -Ternary Operator
  -Assignment Operator
    

-Unary Operator:
````
The java unary operators require only one operand

unary operators are used to perform various operations

 -incrementing / decrementing a value by one
 -negating an expression
 -inverting the value of a boolean
 
 
  postfix  --> expr++, expr--
  
  prefix   -->++expr, --expr
              +expr , -expr 


example:
```

public class Test10 {

	public static void main(String[] args) {
		int x = 10;
		
		System.out.println(x++);//10
		
		System.out.println(++x);//12
		
		System.out.println(x--);//12
		
		System.out.println(--x);//10
		
	}
}


example:
``
package operators;

public class Test2 {
	
	public static void main(String[] args) {
		
		int a = 10;
		int b = 10;
		System.out.println(a++ + ++a);//22
		System.out.println(b++ + b++);//10+11=21
		
	}

}


day-19:
`
~ 

!
 int a=10;
 int c = 25;
 int b = -10;
 boolean d = false;
 sysout(~a);// -11   (minus of total positive value which starts from 0)
 sysout(~b);//9
 sysout(~c);//-26
 sysout(!d);//true
 
 example:
 ``
 package operators;

public class Test3 {

	public static void main(String[] args) {
		
		
		int a = 26;
		int b = -56;
		boolean c = true;
		boolean d = false;
		
		System.out.println(~a);//-27
		System.out.println(~b);//55
		System.out.println(!c);
		System.out.println(!d);
		
	}
}


unary operators: ++, --, ! and ~


 


Arithmetic operators:
```
these are used to perform 

  -addition
  -substraction
  -multiplication
  -division.
  
  
example:
`` 
package operators;

//this program is on Arithmetic operators
public class Test4 {

	public static void main(String[] args) {

		int a = 10;
		int b = 5;
		System.out.println(a + b);// 15

		System.out.println(a - b);// 5

		System.out.println(a * b);// 50
		System.out.println(a / b);// 2

		System.out.println(a % b);// 0

	}
}


example:
``
package operators;

public class Test5 {
	
	public static void main(String[] args) {
		
		System.out.println(10*10/5+3-1*4/2);
	}

}

note:
``
in above example, expression gets evaluated based on 
bodmas rule.

 braket
 operations
 division
 multiplication
 addition
 substraction
 
 


java left shift operator:
````
<<

it is used to shift all of the bits in a value to the left
side of a specified no.of times.

example:
`
//left shift operator example
package operators;

public class Test6 {

	public static void main(String[] args) {
		
		
		System.out.println(10<<2);//10*2^2=10*4=40
		System.out.println(10<<3);//10*2^3=10*8=80
		System.out.println(20<<2);//20*2^2=20*4=80
		System.out.println(15<<4);//15*2^4=15*16=240
		
	}
}


rightshift operator(>>):
`````
it is used to move left operatnds value to right
by the no.of bits specified by the right operand.


example:
`
package operators;

public class Test7 {

	 public static void main(String[] args) {
		
		 
		 System.out.println(10>>2);//10/2^2=10/4=2
		 System.out.println(20>>2);//20/2^2=20/4=5
		 System.out.println(20>>3);//2
		 
		 

	}
}


AND operator 
Logical and(&&)

bitwise and(&):
````
logical && operator doesn't check second condition 
if firstcondition is false.

it checks second conditin only if first one is true.

the bitwise & operator always checks both conditions whether
first condition is true or false.


example:
```
package operators;

public class Test8 {

	public static void main(String[] args) {
		
		
		int a=10;
		int b=5;
		int c=20;
		System.out.println(a<b&&a<c);//false&&true =false
		System.out.println(a<b&a<c);//false&true=false
	}
}


logical or (||) and bitwise or (|):
`````
the logical || operator doesn't check second
condition if first condition is true.

It checks second condition if first one is false.

the bitwise | operator always checks both conditions
whether first condition is true or false.

example:
```
package operators;

public class Test9 {

	
	public static void main(String[] args) {
		
		
		int a = 10;
		int b= 5;
		int c=20;
		System.out.println(a>b||a>c);//false||false ==true
		System.out.println(a>b|a<c);//true|true =true
		
	}
}



ternary operator:
````
it is used as one liner replacement for if-then-else
statement
  
example:
`
package operators;

public class Test10 {
	
	public static void main(String[] args) {
		
		
		int a =2;
		int b = 5;
		int min = (a>b)?a:b;
		System.out.println(min);
	}

}


assignment operator:
`````
it is one of the most common operator.

it is used to assign the value on its right to the operand
on its left.

int a = 10;

example:
``````
package operators;

public class Test11 {
	
	public static void main(String[] args) {
		
		int a = 10;
		int b= 20;
		
		a+=4;//a=a+4
		
		b-=4;//b=b-4;
		
		a*=2;//a=a*2
		
		
		System.out.println(a);//14
		System.out.println(b);//16
		System.out.println(a);//28
		
		a/=2;//a=a/2
		System.out.println(a);//14
		
	}

}


multithreading:
================

multitasking:
=============
executing several tasks simulteniously at the same time such type is called multitasking

there two types of multitasking

process based multitasking thread based multitasking

process based multitasking:
============
executing several tasks simulteniously where each type  seperate independent process such type isActive
called 
eg:
working on lapyop typing prograam and download the song and listening ,music
 these are all different process not related to  each called process based.
 apllicable for os level
executing several tasks simulteniously where seperate independent of same programm is called
: applicable for programtic level oly
a client came to a programmer execute the programm int 2 hrs how much tiem it will take programmer said it willtake

10 hrs

lines of proggramms are 1000 lines only one thread can be executed

it wil ake 10 hrs but all lines related not then one thread added and it execute seperatly then it 

it will complete in 5hrs.
what is thread;
================
thread is light weidt and it sis ammal amount in process.numberof threads in single process.
it will executes seepratly.

how many ways we can define a thread?

there two ways we can define a thread.
 by extending thread class
 by implemts runnable interface
 in runnable is the interface which have only one abstrct method
 we have to override the abstracy method give the implemntation.
 that abstract method also called as functional nterface.
 publist abstract void run();
 class myclass implements Runnable
{
@override
public void run(){

  for(i=1;i<5;i++)
  {
  Syso("child thread");
  }

}

public static void main(String args[]){

//CRETE THE OBJECT
Thread t1= new Thread(t);
MyClass t= new Myclass();
//if you want call the run method there is start method present in thread class
//if you want call thred class method you need to create the object for thread class and pass the 
reference in the my calss.
t1.start(); //invoke the run method.
//if you call run method its not created the thread it will call like normal method.
then main method can be executed.

the main objective is thread scheduler gives the permission which thread can b e executed. it will assign the 
process fro waiting thrrad which thread will executes firat
it s completly depends on the thread scheduelr
we cant predict exect outpur
it changes jvm to jvm.
by extending thread calss:


class myThread extends Thread{

public vid run(){
 for(int i=1; i<5;i++){
 
 Syso("child thread");
 }
}
public static void main(String args[]){

myThread t= new myThred();
t.start();

for(i=1;i<5;i++)
{

Syso("main theread")
}


}
}


}
}

can we change name of thread yes;
is threads havong any names.

Thread.currentThread();






String:  stringbuffer stringbuilder:

========
above these are classes and its colection of charecters represents same then what is the dofference.


grouping or collection of objects is called string,

char ch[]={'s','t','r','i','n','g'};

String s= new String(ch[]);

string can be shown in two ways one is litteral way '
another one is by new keyword


String name= "welcome"; //string litteral
        name.concat("india");
		
// if i print name what is the output you expedcted

Syso(name);
o/p: welcome.
   why means Stirng is immutalble
  
  once we assugn value to the Steing we cant change.
String name1="welcome";

Syso(name.equals(name1)); //true or false
Syso(name==name1); //true or false

String name2= new String("welcome");
String name3= new String("welcome");

Syso(name2.equals(name3)); //true
Syso(name2==name3);//false

StringBuffere sb= new StringBuffer("welcome");
StringBuffere sb2= new StringBuffer("welcome");

Syso(sb1.equals(sb2));//flase



String buffere we have synchronized keyword in this case onlyone thread will be executed
string buffereis thread safety
Stringbuilder donthave thread safety

here string is the non primitivedatattype
andd aslo at the same time it is object.
































